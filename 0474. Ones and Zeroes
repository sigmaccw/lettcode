/**
 *  You are given an array of binary strings strs and two integers m and n.
 *  Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.
 *  A set x is a subset of a set y if all elements of x are also elements of y.
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void countNum(char *str, int *num0, int *num1){
    int n0 = 0, n1 = 0;
    for(int i = 0; i < strlen(str); i++){    
        if(str[i] == '0'){
            n0++;
        }
        else{
            n1++;
        }
    }
    *num0 = n0;
    *num1 = n1;
}

int findMaxForm(char strs[][100], int strsSize, int m, int n){
    int count0 = 0, count1 = 0;
    int size0 = 0, size1 = 0;
    int i = 0, j = 0;
    int ** ret = (int **)calloc(m + 1, sizeof(int *));
    for(i = 0; i < m + 1; i++){
        ret[i] = (int *)calloc(n, sizeof(int));
    }

    for(i = 0; i < strsSize; i++){
        countNum(strs[i], &count0, &count1);
        for(size0 = m; size0 >= 0; size0--){
            for(size1 = n; size1 >= 0; size1--){
                if(size0 < count0 || size1 < count1){
                    continue;
                }
                if(ret[size0][size1] < ret[size0 - count0][size1 - count1] + 1){
                    ret[size0][size1] = ret[size0 - count0][size1 - count1] + 1;
                }
            }
        }
    }

    return ret[m][n];
}

int main(int argc, char *argv[])
{
    char strs[][100] = {"10", "0", "1"};
    int m = 1;
    int n = 1;
    int ret = findMaxForm(strs, sizeof(strs)/sizeof(strs[0]), m, n);
    printf("====== ret = %d\n", ret);
    
    return 0;
}
