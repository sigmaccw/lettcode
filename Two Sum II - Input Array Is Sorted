/**
 *  Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they
 *  add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1
 *  < index2 <= numbers.length.
 *
 *  Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
 *  The tests are generated such that there is exactly one solution. You may not use the same element twice.
 *  Your solution must use only constant extra space.
 */
 
 #include <stdio.h>
#include <string.h>
#include <stdlib.h>

int searchNumber(int *nums, int numsSize, int target, int skip)
{
    int target_index = numsSize >> 1;
    int upper_bound = numsSize - 1;
    int lower_bound = 0;
    int tmp = 0;

    if(skip == upper_bound){
        upper_bound = upper_bound - 1;
    }
    if(skip == lower_bound){
        lower_bound = lower_bound + 1;
    }

    if(nums[upper_bound] < target){
        return -1;
    }
    else if(nums[upper_bound] == target){
        return upper_bound;
    }
    
    if(nums[lower_bound] > target){
        return -1;
    }
    else if(nums[lower_bound] == target){
        return lower_bound;
    }
    do{
        if(nums[target_index] == target){
            if(target_index == skip){
                target_index++;
            }
            else{
                return target_index;
            }
        }
        else{
            if(nums[target_index] < target){
                tmp = (target_index + upper_bound) >> 1;
                lower_bound = target_index;
            }
            else{
                tmp = (target_index + lower_bound) >> 1;
                upper_bound = target_index;
            }
            if(((lower_bound == target_index) && (target_index == upper_bound)) || (upper_bound - lower_bound == 1)){
                return -1;
            }
            target_index = tmp;
        }
    }while(1);
    return -1;
}

int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){
    int *result = (int *)calloc(2, sizeof(int));    
    int i = 0;
    int search = 0;
    int ret = 0;
    for(i = 0; i < numbersSize; i++){
        search = target - numbers[i];
        ret = searchNumber(numbers, numbersSize, search, i);
        if(ret != -1){
            break;
        }
    }
    result[0] = i + 1;
    result[1] = ret + 1;

    *returnSize = 2;
    return result;
}

int main(int argc, char *argv[])
{
    int numbers[] = {0,0,3,4};
    int target = 0;
    int returnSize = 0;
    int i = 0;
    int *ret = twoSum(numbers, sizeof(numbers)/sizeof(int), target, &returnSize);
    if(ret){
        printf("ret = [%d, %d]\n", ret[0], ret[1]);
    }
    free(ret);
    return 0;
}
