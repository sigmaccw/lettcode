/*
* Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
* You may assume that each input would have exactly one solution, and you may not use the same element twice.
* You can return the answer in any order.
*
* 
*
* Example 1:
*
* Input: nums = [2,7,11,15], target = 9
* Output: [0,1]
* Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
* Example 2:
* 
* Input: nums = [3,2,4], target = 6
* Output: [1,2]
* Example 3:
* 
* Input: nums = [3,3], target = 6
* Output: [0,1]
* 
*
* Constraints:
*
* 2 <= nums.length <= 104
* -109 <= nums[i] <= 109
* -109 <= target <= 109
* Only one valid answer exists.
*/
/*======================================================================================*/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int i = 0, j = 0;
    int * ret_nums = NULL;
    *returnSize = 0;
    for(i = 0; i < numsSize; i++){
        for(j = i + 1; j < numsSize; j++){
            if(nums[i] + nums[j] == target){
                ret_nums = calloc(1, sizeof(int) * 2);
                ret_nums[0] = i;
                ret_nums[1] = j;
                *returnSize = 2;
            }
        }
    }
    return ret_nums;
}
