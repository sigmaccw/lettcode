/**
 *  Let's call an array arr a mountain if the following properties hold:
 *  arr.length >= 3
 *  There exists some i with 0 < i < arr.length - 1 such that:
 *  arr[0] < arr[1] < ... arr[i-1] < arr[i]
 *  arr[i] > arr[i+1] > ... > arr[arr.length - 1]
 *  Given an integer array arr that is guaranteed to be a mountain, 
 *  return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
 */
 
 #include <stdio.h>
#include <string.h>
#include <stdlib.h>

int peakIndexInMountainArray(int* arr, int arrSize) {
    int cur_index = arrSize >> 1;
    int upper_bound = arrSize - 1;
    int lower_bound = 0;

    if (arr[upper_bound] > arr[upper_bound - 1]) {
        return upper_bound;
    }

    if (arr[lower_bound] > arr[lower_bound + 1]) {
        return lower_bound;
    }
    
    do {
        if (arr[cur_index] > arr[cur_index - 1]) {
            if (arr[cur_index] > arr[cur_index + 1]) {
                return cur_index;
            }
            else {
                lower_bound = cur_index;
            }
        }
        else {
            upper_bound = cur_index;
        }
        cur_index = (lower_bound + upper_bound) >> 1;
    } while (1);
    return -1;
}

int main()
{
    int nums[] = {18,29,38,59,98,100,101,102,101};
    printf("result = %d\n", peakIndexInMountainArray(nums, sizeof(nums) / sizeof(int)));
    return 0;
}
