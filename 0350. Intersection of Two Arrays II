/**
 *  Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as
 *  many times as it shows in both arrays and you may return the result in any order.
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize)
{
    int * source_nums = NULL; // shorter array
    int source_size = 0;
    int * target_nums = NULL; // longer array
    int target_size = 0;
    int i = 0;
    int j = 0;
    int k = 0;
    int * array = NULL;
    
    if(nums1Size >= nums2Size){
        target_nums = nums1;
        target_size = nums1Size;
        source_nums = nums2;
        source_size = nums2Size;
    }
    else{
        target_nums = nums2;
        target_size = nums2Size;
        source_nums = nums1;
        source_size = nums1Size;
    }
    array = (int *)calloc(source_size + 1, sizeof(int));
    for(i = 0; i < source_size; i++){
        for(j = 0; j < target_size; j++){
            if(source_nums[i] == target_nums[j]){
                array[k] = source_nums[i];
                k++;
                target_nums[j] = 9999;
                break;
            }
        }
    }
    *returnSize = k;
    return array;
}


int main(int argc, char *argv[])
{
    int nums1[] = {1,4,1,9,1,5,1};
    int nums2[] = {9,4,9,8,4};
    int * ret = NULL;
    int returnSize = 0, i = 0;;

    ret = intersect(nums1, sizeof(nums1)/sizeof(int), nums2, sizeof(nums2)/sizeof(int), &returnSize);
    if(ret){
        printf("ret = ");
        for(i = 0; i < returnSize; i++){
            printf("%d", ret[i]);
            if(i < returnSize - 1){
                printf(", ");
            }
        }
        printf("\n");
        free(ret);
    }
    return 0;
}
