/**
 * Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
 * Only numbers 1 through 9 are used.
 * Each number is used at most once.
 * Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int update_buffer(int *buffer, int k, int ptr)
{
    int i = 0;
    if(k - ptr < 0){
        return -1;
    }
    
    if(buffer[k - ptr] + 1> (10 - ptr)){
        if(update_buffer(buffer, k, ptr + 1) == -1){
            return -1;
        }
    }
    else{
        buffer[k - ptr]++;
        for(i = 0; i < ptr; i++){
            if(buffer[k - ptr + i] < 9){
                buffer[k - ptr + 1 + i] = buffer[k - ptr + i] + 1;
            }
        }
    }
    return 0;
}

int** combinationSum3(int k, int n, int* returnSize, int** returnColumnSizes){
    
    int i = 0, sum = 0;
    int buffer[9];
    int * tmp = NULL;
    int * ColumnSizes;
    int ** ret;
    int ** ret_tmp;
    int localsize = 0;
    *returnSize = 0;
    for(i = 0; i < k; i++){
        buffer[i] = i + 1;
        sum += buffer[i];
    }
    if(sum == n){
        ColumnSizes = (int *)calloc(1, sizeof(int));
        if(ColumnSizes){
            ColumnSizes[0] = k;
            ret_tmp = (int **)calloc(1, sizeof(int *));
            if(ret_tmp){
                ret = ret_tmp;
                ret[0] = (int *)calloc(k, sizeof(int));
                for(i = 0; i < k; i++){
                    ret[0][i] = buffer[i];
                }
                localsize++;
            }
        }
        else{
            return NULL;
        }
    }

    while(1){
        if(update_buffer(buffer, k, 1) == -1){
            break;
        }
        sum = 0;
        for(i = 0; i < k; i++){
            sum += buffer[i];
        }
        if(sum == n){
            tmp = (int *)calloc(localsize, sizeof(int));
            if(tmp){
                memcpy(tmp, ColumnSizes, sizeof(int) * localsize);
                if(ColumnSizes){
                    free(ColumnSizes);
                }
                ColumnSizes = tmp;
                ColumnSizes[localsize] = k;
                ret_tmp = (int **)calloc(localsize, sizeof(int *));
                if(ret_tmp){
                    for(i = 0; i < localsize; i++){
                        ret_tmp[i] = ret[i];
                    }
                    ret_tmp[localsize] = (int *)calloc(k, sizeof(int));
                    for(i = 0; i < k; i++){
                        ret_tmp[localsize][i] = buffer[i];
                    }
                    ret = ret_tmp;
                    localsize++;
                }
            }
            else{
                return NULL;
            }
        }
    }
    *returnColumnSizes = ColumnSizes;
    *returnSize = localsize;
    return ret;
}

int main(int argc, char *argv[])
{
    int k = 3;
    int n = 9;
    int returnSize = 0;
    int * returnColumnSizes;
    int ** ret;
    int i = 0, j = 0;

    ret = combinationSum3(k, n, &returnSize, &returnColumnSizes);
    printf("ret = %p, returnSize = %d\n", ret, returnSize);
    if(ret != NULL){
        printf("%d\n", __LINE__);
        for(i = 0; i < returnSize; i++){
            printf("%d\n", __LINE__);
            for(j = 0; j < returnColumnSizes[i]; j++){
                printf("%d, ", ret[i][j]);
            }
            printf("\n");
        }
        printf("%d\n", __LINE__);
        free(returnColumnSizes);
        for(i = 0; i < returnSize; i++){
            free(ret[i]);
        }
        free(ret);
    }

    return 0;
}
