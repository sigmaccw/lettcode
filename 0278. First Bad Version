/**
 *  You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the
 *  quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
 * 
 *  Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
 *
 *  You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version.
 *  You should minimize the number of calls to the API.
 */
 
 #include <stdio.h>
#include <string.h>
#include <stdlib.h>

int badversion = 0;

bool isBadVersion(int version)
{
    return (version >= badversion);
}

int firstBadVersion(int n) 
{
    unsigned int upper_bound = n;
    unsigned int lower_bound = 0;
    long cur = n >> 1;

    if(isBadVersion(0) == true){
        return 0;
    }
    do {
        //printf("%d, cur = %ld, lower_bound = %d, upper_bound = %d\n", __LINE__, cur, lower_bound, upper_bound);
        if (isBadVersion(cur) == true) {
            upper_bound = cur;
            //printf("%d, cur = %ld, lower_bound = %d, upper_bound = %d\n", __LINE__, cur, lower_bound, upper_bound);
        }
        else{
            lower_bound = cur;
            //printf("%d, cur = %ld, lower_bound = %d, upper_bound = %d\n", __LINE__, cur, lower_bound, upper_bound);
        }
        cur = (lower_bound + upper_bound) >> 1;
        //printf("%d, cur = %ld, lower_bound = %d, upper_bound = %d\n", __LINE__, cur, lower_bound, upper_bound);
        if(upper_bound - lower_bound == 1){
            return upper_bound;
        }
    } while (1);
    //printf("%d\n", __LINE__);
    return lower_bound;
}
int main(int argc, char *argv[])
{
    badversion = 1702766719;
    int input_version = 2126753390;
    printf("first bad version = %d\n", firstBadVersion(input_version));
    return 0;
}
