/**
 *  You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
 *  The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.
 *  
 *  An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
 *
 *  Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
 *
 *  The testcases are generated so that the answer will be less than or equal to 2 * 109.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int uniquePathsWithObstacles(int obstacleGrid[][2], int obstacleGridSize, int* obstacleGridColSize){
    // from obstacleGrid[0][0] to objstacleGrid[-1][obstacleGridColSize[-1]]
    int ret = -1;
    printf("Grid:\n");
    if(obstacleGrid[0][0] == 1 || obstacleGrid[obstacleGridSize - 1][obstacleGridColSize[obstacleGridSize - 1] - 1] == 1){
        return 0;
    }
    for(int i = 0; i < obstacleGridSize; i++){
        for(int j = 0; j < obstacleGridColSize[i]; j++){
            if(obstacleGrid[i][j] == 1){
                obstacleGrid[i][j] = -1;
            }
            else{
                if(i == 0){
                    if(j == 0){
                        obstacleGrid[i][j] = 1;
                    }
                    else if(obstacleGrid[i][j - 1] == -1){
                        obstacleGrid[i][j] = -1;
                    }
                    else{
                        obstacleGrid[i][j] = 1;
                    }
                }
                else if(j == 0){
                    if(obstacleGrid[i - 1][j] == -1){
                        obstacleGrid[i][j] = -1;
                    }
                    else{
                        obstacleGrid[i][j] = 1;
                    }
                }
                else{
                    if(obstacleGrid[i - 1][j] != -1){
                        if(obstacleGrid[i][j - 1] != -1){
                            obstacleGrid[i][j] = obstacleGrid[i][j - 1] + obstacleGrid[i - 1][j];
                        }
                        else{
                            obstacleGrid[i][j] = obstacleGrid[i - 1][j];
                        }
                    }
                    else{
                        obstacleGrid[i][j] = obstacleGrid[i][j - 1];
                    }
                }
            }
            printf("%02d ", obstacleGrid[i][j]);
        }
        printf("\n");
    }
    ret = obstacleGrid[obstacleGridSize - 1][obstacleGridColSize[obstacleGridSize - 1] - 1];
    if(ret == -1){
        ret = 0;
    }
    return ret;
}

int main(int argc, char *argv[])
{
    int obstacleGrid[3][2] = { {0,0}, {1,1}, {0,0}};
    int obstackeGridColSize[3] = {2,2,2};
    int ret = uniquePathsWithObstacles(obstacleGrid, 3, obstackeGridColSize);
    printf("====== ret = %d\n", ret);
    
    return 0;
}
