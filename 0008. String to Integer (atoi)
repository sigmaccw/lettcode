/**
 * Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).
 * 
 * The algorithm for myAtoi(string s) is as follows:
 *
 * Read in and ignore any leading whitespace.
 * Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
 * Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
 * Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
 * If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
 * Return the integer as the final result.
 * Note:
 * 
 * Only the space character ' ' is considered a whitespace character.
 * Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.
 */ 
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define intmax 2147483647
#define intmin -2147483648

int myAtoi(char * s)
{
    long long a = 0;
    int length = strlen(s);
    bool neg = false, overlimit = false;
    int sptr = -1;
    int eptr = -1;

    if(length == 0){
        return 0;
    }

    for(int i = 0; i < length; i++){
        if(s[i] == ' '){
            if(sptr != -1){
                break;
            }
            continue;
        }
        else if(s[i] == '-'){
            if(s[i + 1] < '0' || s[i + 1] > '9'){
                break;
            }
            if(sptr != -1){
                break;
            }
            neg = true;
        }
        else if(s[i] == '+'){
            if(s[i + 1] < '0' || s[i + 1] > '9'){
                break;
            }
            if(sptr != -1){
                break;
            }
            neg = false;
        }
        else if(s[i] >= '0' && s[i] <= '9'){
            if(sptr == -1){
                sptr = i;
            }
            if(a > intmax){
                a = intmax;
                overlimit = true;
            }
            a = a * 10 + (s[i] - '0');
        }
        else{
            break;
        }
    }
    if(neg == true){
        a = -1 * a;
    }
    if(a > intmax){
        return intmax;
    }
    else if(a < intmin){
        return intmin;
    }
    if(overlimit == true){
        if(neg == true){
            return intmin;
        }
        else{
            return intmax;
        }
    }
    return a;
}

int main(int argc, char *argv[])
{
    printf("myAtoi = %d\n", myAtoi(argv[1]));
    return 0;
}
