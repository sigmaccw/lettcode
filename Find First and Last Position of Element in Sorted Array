/**
 *  Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
 *  If target is not found in the array, return [-1, -1].
 *  You must write an algorithm with O(log n) runtime complexity.
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int find_lower_bound(int *nums, int numsSize, int target)
{
    int target_index = numsSize >> 1;
    int upper_bound = numsSize - 1;
    int lower_bound = 0;
    
    if(nums[0] > target){
        return -1;
    }
    else if(nums[0] == target){
        return 0;
    }
    do{
        if(nums[target_index] == target){
            upper_bound = target_index;
        }
        else{
            if(nums[target_index] < target){
                lower_bound = target_index;
            }
            else{
                upper_bound = target_index;
            }
        }
        target_index = (lower_bound + upper_bound) >> 1;;
        if(((lower_bound == target_index) && (target_index == upper_bound)) || (upper_bound - lower_bound == 1)){
            if(nums[lower_bound] == target){
                return lower_bound;
            }
            else if(nums[upper_bound] == target){
                return upper_bound;
            }
            else{
                return -1;
            }
        }
    }while(1);
    return -1;
}
int find_upper_bound(int *nums, int numsSize, int target)
{
    int target_index = numsSize >> 1;
    int upper_bound = numsSize - 1;
    int lower_bound = 0;
    
    if(nums[upper_bound] < target){
        return -1;
    }
    else if(nums[upper_bound] == target){
        return upper_bound;
    }
    do{
        if(nums[target_index] == target){
            lower_bound = target_index;
        }
        else{
            if(nums[target_index] < target){
                lower_bound = target_index;
            }
            else{
                upper_bound = target_index;
            }
        }
        target_index = (lower_bound + upper_bound) >> 1;
        if(((lower_bound == target_index) && (target_index == upper_bound)) || (upper_bound - lower_bound == 1)){
            if(nums[upper_bound] == target){
                return upper_bound;
            }
            else if(nums[lower_bound] == target){
                return lower_bound;
            }
            else{
                return -1;
            }
        }
    }while(1);
    return -1;
}
int* searchRange(int* nums, int numsSize, int target, int* returnSize)
{
    int *ret = (int *)calloc(2, sizeof(int));
    ret[0] = -1;
    ret[1] = -1;
    *returnSize = 2;
    if((nums == NULL) || (numsSize == 0)){
        return ret;
    }

    ret[0] = find_lower_bound(nums, numsSize, target);
    if(ret[0] == -1){
        return ret;
    }
    else{
        ret[1] = find_upper_bound(nums, numsSize, target);
        if(ret[1] == -1){
            return ret;
        }   
    }

    return ret;
}
int main(int argc, char *argv[])
{
    int nums[] = {5, 7, 7, 8, 8, 10};
    int target = 8;
    int returnSize = 0;
    int * ret = searchRange(nums, sizeof(nums)/sizeof(int), target, &returnSize);
    if(returnSize > 0){
        printf("range = [");
        for(int i = 0; i < returnSize; i++){
            printf("%d, ", ret[i]);
        }
        printf("\n");
    }
    if(ret){
        free(ret);
    }
    return 0;
}
