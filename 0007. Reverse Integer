/**
 *  Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-
 *  bit integer range [-231, 231 - 1], then return 0.
 *  Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define intmax "2147483647"
#define intmin "2147483648"

int reverse(int x){
    char * buffer = NULL;
    char *ptr = intmax;
    int count = 0, i = 0;
    bool neg = false, markup = false, leading_zero = true;
    int ret = 0;
    char rev = 0;

    if(x < 0){
        if(x <= -2147483648){
            x++;
            markup = true;
        }
        x = -1 * x;
        neg = true;
    }
    buffer = (char *)calloc(20, sizeof(char));
    count = sprintf(buffer, "%d", x);
    if(count > 10){
        free(buffer);
        return 0;
    }
    for(i = 0; i < (count >> 1); i++){
        rev = buffer[i];
        buffer[i] = buffer[count - i - 1];
        buffer[count - i - 1] = rev;
        if(i == 0){
            if(neg == true && markup == true){
                buffer[0] = buffer[0] + 1;
            }
        }
    }
    if(count == 10){
        for(i = 0; i < count; i++){
            if(buffer[i] > ptr[i]){
                free(buffer);
                return 0;
            }
            else if(buffer[i] < ptr[i]){
                break;
            }
        }
    }
    ret = atoi(buffer);
    if(neg == true){
        ret *= -1;
    }
    free(buffer);
    return ret;
}
int main(int argc, char *argv[])
{
    int x = atoi(argv[1]);
    printf("reverse = %d\n", reverse(x));
    return 0;
}
