/**
 *  You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are
 *  positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.
 *
 *  A row i is weaker than a row j if one of the following is true:
 *  The number of soldiers in row i is less than the number of soldiers in row j.
 *  Both rows have the same number of soldiers and i < j.
 *
 *  Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int numSolder(int *nums, int numsSize)
{
    int target_index = numsSize >> 1;
    int upper_bound = numsSize - 1;
    int lower_bound = 0;
    int tmp = 0;

    if(nums[lower_bound] == 0){
        return 0;
    }
    if(nums[upper_bound] == 1){
        return numsSize;
    }

    do{
        if(nums[target_index] == 1){
            lower_bound = target_index;
        }
        else{
            upper_bound = target_index;
        }
        tmp = (lower_bound + upper_bound) >> 1;
        if(((lower_bound == target_index) && (target_index == upper_bound)) || (upper_bound - lower_bound == 1)){
            return (lower_bound + 1);
        }
        target_index = tmp;
    }while(1);
    return -1;
}
int* kWeakestRows(int mat[][2], int matSize, int* matColSize, int k, int* returnSize)
{
    int * ret = (int *)calloc(k + 1, sizeof(int));
    int i = 0, j = 0, l = 0;
    int * sequence = (int *)calloc(matSize + 1, sizeof(int));
    int smallest_number = 0;
    for(i = 0; i < matSize; i++){
        sequence[i] = numSolder(mat[i], matColSize[i]);
    }
    *returnSize = k;
    while(k > 0){
        smallest_number = matColSize[0] + 1;
        for(i = 0; i < matSize; i++){
            if(smallest_number > sequence[i]){
                smallest_number = sequence[i];
                j = i;
            }
        }
        ret[l] = j;
        l++;
        sequence[j] = matColSize[0] + 1; // set to max to avoid repeat count
        k--;
    }
    return ret;
}
int main(int argc, char *argv[])
{
    //int mat[5][5] = {{1,1,0,0,0},{1,1,1,1,0},{1,0,0,0,0},{1,1,0,0,0},{1,1,1,1,1}};
    int mat[4][2] = {{1,0},{1,0},{1,0},{1,1}};
    //int matColSize[5] = {5,5,5,5,5};
    int matColSize[4] = {2,2,2,2};
    int k = 4;
    int returnSize = 0;
    int * ret = kWeakestRows(mat, 4, matColSize, k, &returnSize);
    printf("returnSize = %d\n", returnSize);
    for(int i = 0; i < returnSize; i++){
        printf("[%d]: %d\n", i, ret[i]);
    }
    if(ret){
        free(ret);
    }

    return 0;
}
