/**
 *  There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
 *  The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
 * 
 *  Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
 *
 *  The test cases are generated so that the answer will be less than or equal to 2 * 109.
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int uniquePaths(int m, int n){
    int i = 0;
    int j = 0;
    int ** grid = (int **)calloc(m, sizeof(int *));
    
    for(i = 0; i < m; i++){
        grid[i] = (int *)calloc(n, sizeof(int));
    }    
    
    for(i = 0; i < m; i++){
        for(j = 0; j < n; j++){
            if(i == 0){
                grid[i][j] = 1;
            }
            else if(j == 0){
                grid[i][j] = 1;
            }
            else{
                grid[i][j] = grid[i][j - 1] + grid[i - 1][j];
            }
        }
    }
    int ret = grid[m - 1][n - 1];
    for(i = 0; i < m; i++){
        free(grid[i]);
    }
    free(grid);
    return ret;
}
int main(int argc, char *argv[])
{
  int m = 4;
  int n = 7;
  int ret = uniquePaths(m, n);
  printf("====== ret = %d\n", ret);
    
  return 0;
}
